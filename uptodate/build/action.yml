name: "UpToDate Build"
description: "Build docker containers with uptodate"
inputs:
  repo:
    description: Repository name in the registry
    required: true
  registry:
    description: Container registry (defaults to ghcr.io)
    required: true
    default: ghcr.io
  deploy:
    description: Deploy (push) to the registry (defaults to False).
    default: false
    required: true
  root:
    description: Root working directory, defaults to PWD if not set.
    default: "."
    required: true
  dockerfile:
    description: Path of Dockerfile relative to root (from matrix action, result.filename)
    required: true
    default: Dockerfile
  token:
    description: GitHub token to authenticate build.
    required: true
  container_name:
    description: Container name to build (from matrix action, result.container_name)
    required: true
  command_prefix:
    description: Command prefix (from matrix action, result.command_prefix)
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: GHCR Login
      if: ${{ inputs.deploy == 'true' }}
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.token }}
  
    - name: Pull Docker Layers
      run: docker pull ${{ inputs.registry }}/${{ inputs.repo }}/${{ inputs.container_name }} || exit 0
      shell: bash
  
    - name: Prepare ${{ inputs.container_name }}
      id: builder
      env:
        container: ${{ inputs.container_name }}
        prefix: ${{ inputs.command_prefix }}
        filename: ${{ inputs.dockerfile }}
      run: |
        basedir=$(dirname $filename)
        printf "Base directory is ${basedir}\n"
        # Get relative path to PWD and generate dashed name from it
        cd ${basedir}
        echo "${prefix} -t ${container} ."
        build_args="$(echo "${prefix#*--build-arg}")"
        echo "dockerfile_dir=${basedir}" >> $GITHUB_ENV
        echo "build_args=${build_args}" >> $GITHUB_ENV
        echo "container=${container}" >> $GITHUB_ENV
        echo "filename=${filename}" >> $GITHUB_ENV
      shell: bash
      
    - name: Build ${{ inputs.dockerfile }}
      run: docker build -f ${{ env.filename }} ${{ env.build_args }} -t ${{ inputs.registry }}/${{ inputs.repo }}/${{ env.container }} ${{ inputs.deploy == 'true' }}
      shell: bash

    - name: Deploy
      if: ${{ inputs.deploy == 'true' }}
      run: docker push ${{ inputs.registry }}/${{ inputs.repo }}/${{ env.container }}
      shell: bash
